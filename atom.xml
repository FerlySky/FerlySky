<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FsBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ferlysky.gitee.io/"/>
  <updated>2019-04-08T13:02:54.050Z</updated>
  <id>https://ferlysky.gitee.io/</id>
  
  <author>
    <name>FerlySky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python Spider 1: 概述</title>
    <link href="https://ferlysky.gitee.io/2019/04/08/Python-Spider-1-%E6%A6%82%E8%BF%B0/"/>
    <id>https://ferlysky.gitee.io/2019/04/08/Python-Spider-1-概述/</id>
    <published>2019-04-07T22:07:09.000Z</published>
    <updated>2019-04-08T13:02:54.050Z</updated>
    
    <content type="html"><![CDATA[<p>随着大数据时代的到来，人们对数据资源的需求越来越多，而爬虫是一种很好的自动采集数据的手段。</p><h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><blockquote><p>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。</p></blockquote><a id="more"></a><h1 id="爬虫的分类及应用"><a href="#爬虫的分类及应用" class="headerlink" title="爬虫的分类及应用"></a>爬虫的分类及应用</h1><p>爬虫按照系统结构和实现技术大致可以分为：通用网络爬虫、聚焦网络爬虫 、增量式网络爬虫和深层网络爬虫。</p><ul><li>通用网络爬虫：通用爬虫的目标是尽可能大的网络覆盖。由于其数据涵盖范围较广，很多时候并不能获取到比较专业的资源。像百度谷歌等搜索引擎就是典型的通用爬虫。</li><li>聚焦网络爬虫：它根据要爬取的目标，有选择性的获取互联网上的资源，其结果更具有针对性。</li><li>增量式网络爬虫：只爬取新产生的或者发生变化的网页，不爬取已经获取过的资源。可以减小时间、空间以及带宽的消耗，但是实现起来相对复杂</li><li>深层网络爬虫：爬取某些非表面显示的资源，比如需要登录账号才能查看的资源。</li></ul><h1 id="爬虫的工作流程"><a href="#爬虫的工作流程" class="headerlink" title="爬虫的工作流程"></a>爬虫的工作流程</h1><ol><li>首先选取一部分精心挑选的种子URL；</li><li>将这些URL放入待抓取URL队列；</li><li>从待抓取URL队列中取出待抓取在URL，解析DNS，并且得到主机的ip，并将URL对应的网页下载下来，存储进已下载网页库中。此外，将这些URL放进已抓取URL队列。</li><li>分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着大数据时代的到来，人们对数据资源的需求越来越多，而爬虫是一种很好的自动采集数据的手段。&lt;/p&gt;
&lt;h1 id=&quot;网络爬虫&quot;&gt;&lt;a href=&quot;#网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫&quot;&gt;&lt;/a&gt;网络爬虫&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="网络爬虫" scheme="https://ferlysky.gitee.io/categories/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://ferlysky.gitee.io/tags/python/"/>
    
      <category term="spider" scheme="https://ferlysky.gitee.io/tags/spider/"/>
    
      <category term="网络爬虫" scheme="https://ferlysky.gitee.io/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
      <category term="概述" scheme="https://ferlysky.gitee.io/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>算法 1: 动态规划</title>
    <link href="https://ferlysky.gitee.io/2019/03/30/%E7%AE%97%E6%B3%95-1-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://ferlysky.gitee.io/2019/03/30/算法-1-动态规划/</id>
    <published>2019-03-29T22:22:16.000Z</published>
    <updated>2019-04-03T07:41:40.464Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>动态规划常常适用于有重叠子问题和最优子结构性质的问题。<br><a id="more"></a></p><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><p>若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p><p>动态规划的核心是：<strong>记忆已经解决的子问题的解</strong></p><h1 id="问题特征"><a href="#问题特征" class="headerlink" title="问题特征"></a>问题特征</h1><p>动态规划的基本特征：问题的最优解需要使用到其子问题的最优解</p><h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><ol><li>分析最优解的结构：将问题划分成两个子问题，如果原问题获得最优解，子问题也应该是最优解。</li><li>建立递推关系</li><li>计算最优解</li></ol><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="最长回文子串问题"><a href="#最长回文子串问题" class="headerlink" title="最长回文子串问题"></a>最长回文子串问题</h2><ol><li>问题：给定一个字符串s，找到s中最长的回文子串。（选自Leetcode #5）</li><li>分析解结构：<br> 如果一个字符串是回文串，那么它去掉收尾后也应该是回文串。那么我们就可以讲问题转化为先找到一个小的回文串，然后在判断该回文串在原字符串中前后两个字符是否相同，如果相同，将该子回文串的前后都添加这个字符，新的字符串仍是回文串。</li><li><p>建立递推关系：<br> 设 i, j为字符串s的某一子字符串s[i:j]的开始索引和结束索引，i &lt;= j，我们可以使用一个二维的bool数组 b 来记录位置 b[i][j] 对应的子字符串 s[i:j] 是否为回文串。</p><ol><li>如果 i == j, 说明s[i:j]为单个字符，必定是一个回文串</li><li>如果 j - i == 1, 说明s[i:j]是一个长度为2的字符串，如果 s[i] == s[j], 则s[i:j]是一个回文串</li><li><p>如果 i, j 不满足前两条，说明s[i:j]是一个长度大于等于3的字符串，它可以由它去掉两端的字串s[i+1:j-1]，拼接两个字符 s[i], s[j] 来解决，如果 s[i+1:j-1] 是一个回文串，同时 s[i] == s[j], 则s[i:j]是一个回文串</p><p>用公式表示为：<br><img src="/2019/03/30/算法-1-动态规划/最长回文子串问题公式表示.png" alt="最长回文子串问题公式表示"></p><p>我们以 s = “atrattardd” 为例，画出二维数组：<br><img src="/2019/03/30/算法-1-动态规划/最长回文子串问题示例矩阵.png" alt="最长回文子串问题示例矩阵"><br>我们可以清晰的发现，如果一个位置为0，那么它右上方的位置一定为0，并且要获取最长回文子串，只需要找到矩阵中，离右上角最近的1的位置即可。对于该示例而言，最长回文子串的位置为s[2:7] = “rattar”</p></li></ol></li><li>算法实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="comment">// 用来记录对应子串是否为回文子串</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] bmap = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</span><br><span class="line">        <span class="comment">// 用来记录长度的最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 为了保证在计算某一位置之前，其最下方位置已经被计算并保存过，所以这里i从下往上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i;j &lt; length; j++) &#123; <span class="comment">// &amp;&amp; j &lt; length</span></span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    bmap[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j - i == <span class="number">1</span>) &#123;</span><br><span class="line">                    bmap[i][j] = chars[i] == chars[j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bmap[i][j] = bmap[i+<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; chars[i] == chars[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bmap[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; max) &#123;</span><br><span class="line">                    max = j - i + <span class="number">1</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                    end = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。&lt;/p&gt;
&lt;p&gt;动态规划常常适用于有重叠子问题和最优子结构性质的问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://ferlysky.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://ferlysky.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://ferlysky.gitee.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Plugins 1: Fluttertoast</title>
    <link href="https://ferlysky.gitee.io/2019/03/28/Flutter-Plugins-1-Fluttertoast/"/>
    <id>https://ferlysky.gitee.io/2019/03/28/Flutter-Plugins-1-Fluttertoast/</id>
    <published>2019-03-28T12:31:45.000Z</published>
    <updated>2019-04-03T07:42:03.552Z</updated>
    
    <content type="html"><![CDATA[<p>Fluttertoast 是一个弹出toast的第三方框架<br><a id="more"></a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  fluttertoast:</span> <span class="string">^3.0.3</span></span><br></pre></td></tr></table></figure><p>获取最新版本号：<a href="https://pub.flutter-io.cn/packages/fluttertoast" rel="external nofollow noopener noreferrer" target="_blank">https://pub.flutter-io.cn/packages/fluttertoast</a></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:fluttertoast/fluttertoast'</span>;</span><br></pre></td></tr></table></figure><h2 id="弹出toast"><a href="#弹出toast" class="headerlink" title="弹出toast"></a>弹出toast</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Fluttertoast.showToast(</span><br><span class="line">  msg: <span class="string">"This is Center Short Toast"</span>,</span><br><span class="line">  toastLength: Toast.LENGTH_SHORT,</span><br><span class="line">  gravity: ToastGravity.CENTER,</span><br><span class="line">  timeInSecForIos: <span class="number">1</span>,</span><br><span class="line">  backgroundColor: Colors.red,</span><br><span class="line">  textColor: Colors.white,</span><br><span class="line">  fontSize: <span class="number">16.0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>参数:</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>msg</td><td>String，要弹出的消息，非空必须</td></tr><tr><td>toastLength</td><td>Toast.LENGTH_SHORT、 Toast.LENGTH_LONG</td></tr><tr><td>gravity</td><td>ToastGravity，toast显示的位置，ToastGravity.TOP、ToastGravity.CENTER、ToastGravity.BOTTOM</td></tr><tr><td>timeInSecForIos</td><td>int，仅限ios平台</td></tr><tr><td>backgroundColor</td><td>Color，背景颜色</td></tr><tr><td>textColor</td><td>Color，文字颜色</td></tr><tr><td>fontSize</td><td>float，文字大小</td></tr></tbody></table><h2 id="取消弹出"><a href="#取消弹出" class="headerlink" title="取消弹出"></a>取消弹出</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fluttertoast.cancel();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Fluttertoast 是一个弹出toast的第三方框架&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://ferlysky.gitee.io/categories/Flutter/"/>
    
      <category term="Flutter Plugins" scheme="https://ferlysky.gitee.io/categories/Flutter/Flutter-Plugins/"/>
    
    
      <category term="Flutter" scheme="https://ferlysky.gitee.io/tags/Flutter/"/>
    
      <category term="Flutter Plugin" scheme="https://ferlysky.gitee.io/tags/Flutter-Plugin/"/>
    
  </entry>
  
</feed>
