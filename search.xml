<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[算法 1: 动态规划]]></title>
    <url>%2F2019%2F03%2F30%2F%E7%AE%97%E6%B3%95-1-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 动态规划常常适用于有重叠子问题和最优子结构性质的问题。 基本思想若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。 动态规划的核心是：记忆已经解决的子问题的解 问题特征动态规划的基本特征：问题的最优解需要使用到其子问题的最优解 解题步骤 分析最优解的结构：将问题划分成两个子问题，如果原问题获得最优解，子问题也应该是最优解。 建立递推关系 计算最优解 例题最长回文子串问题 问题：给定一个字符串s，找到s中最长的回文子串。（选自Leetcode #5） 分析解结构： 如果一个字符串是回文串，那么它去掉收尾后也应该是回文串。那么我们就可以讲问题转化为先找到一个小的回文串，然后在判断该回文串在原字符串中前后两个字符是否相同，如果相同，将该子回文串的前后都添加这个字符，新的字符串仍是回文串。 建立递推关系： 设 i, j为字符串s的某一子字符串s[i:j]的开始索引和结束索引，i &lt;= j，我们可以使用一个二维的bool数组 b 来记录位置 b[i][j] 对应的子字符串 s[i:j] 是否为回文串。 如果 i == j, 说明s[i:j]为单个字符，必定是一个回文串 如果 j - i == 1, 说明s[i:j]是一个长度为2的字符串，如果 s[i] == s[j], 则s[i:j]是一个回文串 如果 i, j 不满足前两条，说明s[i:j]是一个长度大于等于3的字符串，它可以由它去掉两端的字串s[i+1:j-1]，拼接两个字符 s[i], s[j] 来解决，如果 s[i+1:j-1] 是一个回文串，同时 s[i] == s[j], 则s[i:j]是一个回文串 用公式表示为： 我们以 s = “atrattardd” 为例，画出二维数组：我们可以清晰的发现，如果一个位置为0，那么它右上方的位置一定为0，并且要获取最长回文子串，只需要找到矩阵中，离右上角最近的1的位置即可。对于该示例而言，最长回文子串的位置为s[2:7] = “rattar” 算法实现123456789101112131415161718192021222324252627282930class Solution &#123; public String longestPalindrome(String s) &#123; int length = s.length(); char[] chars = s.toCharArray(); // 用来记录对应子串是否为回文子串 boolean[][] bmap = new boolean[length][length]; // 用来记录长度的最大值 int max = 0; int start = 0; int end = 0; // 为了保证在计算某一位置之前，其最下方位置已经被计算并保存过，所以这里i从下往上遍历 for (int i = length - 1; i &gt;= 0; i--) &#123; for (int j = i;j &lt; length; j++) &#123; // &amp;&amp; j &lt; length if (i == j) &#123; bmap[i][j] = true; &#125; else if (j - i == 1) &#123; bmap[i][j] = chars[i] == chars[j]; &#125; else &#123; bmap[i][j] = bmap[i+1][j-1] &amp;&amp; chars[i] == chars[j]; &#125; if (bmap[i][j] &amp;&amp; j - i + 1 &gt; max) &#123; max = j - i + 1; start = i; end = j; &#125; &#125; &#125; return s.substring(start, end + 1); &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter Plugins 1: Fluttertoast]]></title>
    <url>%2F2019%2F03%2F28%2FFlutter-Plugins-1-Fluttertoast%2F</url>
    <content type="text"><![CDATA[Fluttertoast 是一个弹出toast的第三方框架 安装12dependencies: fluttertoast: ^3.0.3 获取最新版本号：https://pub.flutter-io.cn/packages/fluttertoast 使用方法导包1import 'package:fluttertoast/fluttertoast'; 弹出toast123456789Fluttertoast.showToast( msg: "This is Center Short Toast", toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.CENTER, timeInSecForIos: 1, backgroundColor: Colors.red, textColor: Colors.white, fontSize: 16.0); 参数: 参数 描述 msg String，要弹出的消息，非空必须 toastLength Toast.LENGTH_SHORT、 Toast.LENGTH_LONG gravity ToastGravity，toast显示的位置，ToastGravity.TOP、ToastGravity.CENTER、ToastGravity.BOTTOM timeInSecForIos int，仅限ios平台 backgroundColor Color，背景颜色 textColor Color，文字颜色 fontSize float，文字大小 取消弹出1Fluttertoast.cancel();]]></content>
      <categories>
        <category>Flutter</category>
        <category>Flutter Plugins</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Flutter Plugin</tag>
      </tags>
  </entry>
</search>
